package com.example.ext_mateuszbratkows.androidmalwaredetec.ui.main;

import android.util.Log;

import com.example.ext_mateuszbratkows.androidmalwaredetec.application.AndroidMalwareDetector;
import com.example.ext_mateuszbratkows.androidmalwaredetec.common.Constants;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.ApplicationInfoLocalDataSource;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModel;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModelTest;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest.ApplicationInfoRemoteDataSource;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest.entities.application_info_response.App;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest.entities.application_info_response.ApplicationInfoResponse;
import com.example.ext_mateuszbratkows.androidmalwaredetec.mvp.ApplicationInfoMvp;
import com.example.ext_mateuszbratkows.androidmalwaredetec.utils.JsonUtils;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import java.util.List;

import rx.Observable;
import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Func1;
import rx.schedulers.Schedulers;

/**
 * Created by ext_mateusz.bratkows on 2016-05-19.
 */
public class ApplicationInfoPresenter implements ApplicationInfoMvp.Presenter {

    private ApplicationInfoRemoteDataSource mRemoteDataSource;
    private ApplicationInfoLocalDataSource mLocalDataSource;
    private ApplicationInfoMvp.View mView;
    private List<ApplicationInfoModel> mApplicationList;

    public ApplicationInfoPresenter(ApplicationInfoRemoteDataSource mRemoteDataSource, ApplicationInfoLocalDataSource mLocalDataSource, ApplicationInfoMvp.View mView) {
        this.mRemoteDataSource = mRemoteDataSource;
        this.mLocalDataSource = mLocalDataSource;
        this.mView = mView;
    }


    @Override
    public void loadApplicationCategories(List<ApplicationInfoModel> mApplicationList) {
        this.mApplicationList = mApplicationList;
        loadApplicationCategories(JsonUtils.parseApplicationInfoToJSON(mApplicationList));
    }

    @Override
    public void saveApplicationInfoModelTest(List<ApplicationInfoModelTest> mApplicationInfoModelTest) {
        mLocalDataSource.saveApplicationList(mApplicationInfoModelTest);
        mView.hideLoading();
    }

    @Override
    public void saveCategoriesToApplicationList(ApplicationInfoResponse applicationInfoResponse) {

    }


    private void loadApplicationCategories(JsonObject mJsonObject) {
        if (mJsonObject != null) {
            mRemoteDataSource.loadApplicationCategories(mJsonObject).map(new Func1<ApplicationInfoResponse, List<ApplicationInfoModel>>() {
                @Override
                public List<ApplicationInfoModel> call(ApplicationInfoResponse applicationInfoResponse) {
                    List<App> mApp = applicationInfoResponse.getApps();
                    for (int i = 0; i <= mApp.size() - 1; i++) {
                        for (int j = 0; j <= mApplicationList.size() - 1; j++) {
                            if (mApp.get(i).getPackage().equals(mApplicationList.get(j).getPackageName()))
                                mApplicationList.get(j).setCategoryApplication(mApp.get(i).getCategory());
                        }
                    }
                    return mApplicationList;
                }
            }).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Subscriber<List<ApplicationInfoModel>>() {
                @Override
                public void onCompleted() {

                }

                @Override
                public void onError(Throwable e) {
                    Log.i(Constants.LOG_TAG, "NOT OK");
                }

                @Override
                public void onNext(List<ApplicationInfoModel> applicationInfoList) {
                    Log.i(Constants.LOG_TAG, "OK");
                    mView.showApplicationInfoList(applicationInfoList);
                   // mLocalDataSource.saveApplicationList(mApplicationList);
                }
            });
        }
    }

    @Override
    public void enableParseJSONError() {

    }


    @Override
    public void start() {
        mView.showLoading();
    }
}
