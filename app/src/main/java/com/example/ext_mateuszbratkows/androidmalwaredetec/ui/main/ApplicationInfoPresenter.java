package com.example.ext_mateuszbratkows.androidmalwaredetec.ui.main;

import android.content.Context;
import android.util.Log;

import com.example.ext_mateuszbratkows.androidmalwaredetec.application.AndroidMalwareDetector;
import com.example.ext_mateuszbratkows.androidmalwaredetec.common.Constants;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.ApplicationInfoLocalDataSource;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModelTest;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest.ApplicationInfoRemoteDataSource;
import com.example.ext_mateuszbratkows.androidmalwaredetec.mvp.ApplicationInfoMvp;
import com.example.ext_mateuszbratkows.androidmalwaredetec.utils.PackageManagerUtils;

import java.util.ArrayList;
import java.util.List;

import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * Created by ext_mateusz.bratkows on 2016-05-19.
 */
public class ApplicationInfoPresenter implements ApplicationInfoMvp.Presenter {

    private ApplicationInfoRemoteDataSource mRemoteDataSource;
    private ApplicationInfoLocalDataSource mLocalDataSource;
    private ApplicationInfoMvp.View mView;
    private Context mContext;

    public ApplicationInfoPresenter(ApplicationInfoRemoteDataSource mRemoteDataSource, ApplicationInfoLocalDataSource mLocalDataSource, Context mContext, ApplicationInfoMvp.View mView) {
        this.mRemoteDataSource = mRemoteDataSource;
        this.mLocalDataSource = mLocalDataSource;
        this.mView = mView;
        this.mContext = mContext;
    }


    @Override
    public void loadApplicationPermissionList() {
        PackageManagerUtils.getApplicationsPermissionsList(mContext).subscribeOn(Schedulers.newThread())
                .observeOn(AndroidSchedulers.mainThread()).subscribe(new Subscriber<List<ApplicationInfoModelTest>>() {
            @Override
            public void onCompleted() {
                mView.hideLoading();
                mView.enableSaveDatabaseButton();
            }

            @Override
            public void onError(Throwable e) {
                mView.showError();
                mView.hideLoading();
                Log.e(Constants.LOG_TAG, e.getMessage());
            }

            @Override
            public void onNext(List<ApplicationInfoModelTest> applicationInfoModels) {
                saveApplicationInfoModelTest(applicationInfoModels);
            }
        });
    }

    @Override
    public void saveApplicationInfoModelTest(List<ApplicationInfoModelTest> mApplicationInfoModelTest) {
        mLocalDataSource.saveApplicationList(mApplicationInfoModelTest);
        mRemoteDataSource.saveApplicationList(mApplicationInfoModelTest);
    }

    @Override
    public void start() {
        mView.showLoading();
        loadApplicationPermissionList();
    }
}
