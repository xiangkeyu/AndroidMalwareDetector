package com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.json;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Environment;
import android.util.Log;

import com.example.ext_mateuszbratkows.androidmalwaredetec.common.Constants;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.ApplicationInfoDataSource;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModelTest;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.lang.reflect.Type;
import java.util.List;

import rx.Observable;
import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * Created by ext_mateusz.bratkows on 2016-05-22.
 */
public class LocalJsonDataSource implements ApplicationInfoDataSource {

    private Context mContext;
    private SharedPreferences mSharedPreferences;
    private SharedPreferences.Editor mEditor;
    private Gson mGson = new Gson();

    public LocalJsonDataSource(Context mContext) {
        this.mContext = mContext;
        this.mSharedPreferences = mContext.getSharedPreferences(LocalJsonContract.APPLICATION_PREFER_NAME, mContext.MODE_PRIVATE);
        this.mEditor = mSharedPreferences.edit();
    }

    @Override
    public Observable<List<ApplicationInfoModelTest>> loadApplicationList() {
        return Observable.create(new Observable.OnSubscribe<List<ApplicationInfoModelTest>>() {
                                     @Override
                                     public void call(Subscriber<? super List<ApplicationInfoModelTest>> subscriber) {
                                         if (subscriber.isUnsubscribed()) {
                                             return;
                                         }
                                         List<ApplicationInfoModelTest> mApplicationInfoModelList;
                                         File sdcard = Environment.getExternalStorageDirectory();
                                         File mFile = new File(sdcard, "app_data.json");
                                         StringBuilder mText = new StringBuilder();
                                         try {
                                             BufferedReader mBufferReader = new BufferedReader(new FileReader(mFile));
                                             String line;
                                             while ((line = mBufferReader.readLine()) != null) {
                                                 mText.append(line);
                                                 mText.append("\n");
                                             }
                                             mBufferReader.close();
                                         } catch (IOException e) {
                                             subscriber.onError(e);
                                         }
                                         String mJsonString = String.valueOf(mText);
                                         if (mJsonString.isEmpty()) {
                                             subscriber.onError(null);
                                         } else {
                                             Type mApplicationListType = new TypeToken<List<ApplicationInfoModelTest>>() {
                                             }.getType();
                                             mApplicationInfoModelList = mGson.fromJson(mJsonString, mApplicationListType);
                                             if (!subscriber.isUnsubscribed()) {
                                                 subscriber.onNext(mApplicationInfoModelList);
                                                 subscriber.onCompleted();
                                             }
                                         }

                                     }
                                 }

        );
    }

    @Override
    public void saveApplicationList(final List<ApplicationInfoModelTest> mApplicationList) {
        Observable.create(new Observable.OnSubscribe<String>() {
            @Override
            public void call(Subscriber<? super String> subscriber) {
                if (subscriber.isUnsubscribed()) {
                    return;
                } else {
                    try {
                        String json = mGson.toJson(mApplicationList);
                        File sdcard = Environment.getExternalStorageDirectory();
                        File mFile = new File(sdcard, "app_data.json");
                        FileOutputStream mFileOutputStream = new FileOutputStream(mFile);
                        OutputStreamWriter mOutputStreamWriter = new OutputStreamWriter(mFileOutputStream);
                        mOutputStreamWriter.append(json);
                        mOutputStreamWriter.close();
                        mFileOutputStream.close();
                        subscriber.onCompleted();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                        subscriber.onError(e);
                    } catch (IOException e) {
                        subscriber.onError(e);
                    }

                }
            }
        }).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Subscriber<String>() {
            @Override
            public void onCompleted() {
                Log.i(Constants.LOG_TAG, "OK");

            }

            @Override
            public void onError(Throwable e) {
                Log.i(Constants.LOG_TAG, e.getMessage());
            }

            @Override
            public void onNext(String s) {

            }
        });
    }

    @Override
    public void saveMalwareList(List<ApplicationInfoModelTest> mApplicationList) {

    }

    @Override
    public void updateApplicationList(List<ApplicationInfoModelTest> mApplicationList) {

    }

    private boolean checkListState() {
        return isListWasSaved();
    }


    public boolean isListWasSaved() {
        return mSharedPreferences.getBoolean(LocalJsonContract.APPLICATION_LIST_IS_SAVE, false);
    }
}
