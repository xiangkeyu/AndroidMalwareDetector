package com.example.ext_mateuszbratkows.androidmalwaredetec.ui.main;

import android.os.Bundle;
import android.os.Environment;
import android.support.annotation.Nullable;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.example.ext_mateuszbratkows.androidmalwaredetec.R;
import com.example.ext_mateuszbratkows.androidmalwaredetec.application.AndroidMalwareDetector;
import com.example.ext_mateuszbratkows.androidmalwaredetec.base.BaseActivity;
import com.example.ext_mateuszbratkows.androidmalwaredetec.common.Constants;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.ApplicationInfoLocalDataSource;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.database.LocalDbHelper;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.database.LocalPersistenceContract;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModel;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModelTest;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest.ApplicationInfoRemoteDataSource;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest.DataAppAPI;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest.entities.application_info_response.ApplicationInfoResponse;
import com.example.ext_mateuszbratkows.androidmalwaredetec.mvp.ApplicationInfoMvp;
import com.example.ext_mateuszbratkows.androidmalwaredetec.utils.AssetDatabaseHelper;
import com.example.ext_mateuszbratkows.androidmalwaredetec.utils.PackageManagerUtils;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import butterknife.Bind;
import butterknife.OnClick;
import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

public class MainActivity extends BaseActivity implements ApplicationInfoMvp.View {

    @Bind(R.id.progress_bar)
    ProgressBar mProgressBar;

    @Bind(R.id.start_process)
    Button mButton;

    @Inject
    DataAppAPI mDataApi;

    @Inject
    ApplicationInfoLocalDataSource mLocalDataSource;

    private ApplicationInfoPresenter mPresenter;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mDataApi = ((AndroidMalwareDetector) getApplication()).getmNetComponent().getDataAppAPI();
        mLocalDataSource = ((AndroidMalwareDetector) getApplication()).getmApplicationInfoLocalComponent().getApplicationInfoLocalDataSource();
        mPresenter = new ApplicationInfoPresenter(new ApplicationInfoRemoteDataSource(mDataApi), mLocalDataSource, this);

    }

    @Override
    protected void onStart() {
        super.onStart();


    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add("Export Database");
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case 0:
                new AssetDatabaseHelper(this, "applications.db").exportDatabase("/_REU/applications.db");
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected int getActivityLayout() {
        return R.layout.activity_main;
    }

    @Override
    protected Toolbar getToolbar() {
        return null;
    }


    @Override
    public void showLoading() {
        mProgressBar.setVisibility(View.VISIBLE);
    }

    @Override
    public void hideLoading() {
        mProgressBar.setVisibility(View.GONE);
    }

    @Override
    public void showError() {
        Toast.makeText(this, "Error", Toast.LENGTH_SHORT).show();
        Log.i("TAG", "isError");

    }

    @Override
    public void showApplicationResponse(ApplicationInfoResponse mResponse) {
        mResponse.getApps();
        Log.i("TAT", "isResponse");
        Toast.makeText(this, "No error", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void showApplicationInfoList(List<ApplicationInfoModel> applicationInfoList) {
        List<ApplicationInfoModelTest> applicationInfoModelTestList = new ArrayList<>();
        List<String> mPermissionsList = ((AndroidMalwareDetector) getApplication()).getmPermissionList();
        for (int i = 0; i < applicationInfoList.size(); i++) {
            applicationInfoModelTestList.add(new ApplicationInfoModelTest(applicationInfoList.get(i).getApplicationName(),
                    applicationInfoList.get(i).getCategoryApplication(), applicationInfoList.get(i).getPackageName()));
            if (applicationInfoList.get(i).getPermissionsName() != null) {
                String[] mApplicationStringArray = applicationInfoList.get(i).getPermissionsName();
                for (int k = 0; k < mApplicationStringArray.length - 1; k++)
                    for (int j = 0; j < mPermissionsList.size(); j++) {
                        if (mPermissionsList.get(j).equals(mApplicationStringArray[k])) {
                            applicationInfoModelTestList.get(i).setKeyValue(mPermissionsList.get(j), 1);
                            break;
                        }
                    }
            }
            Log.d(Constants.LOG_TAG, "OK");
        }
        mPresenter.saveApplicationInfoModelTest(applicationInfoModelTestList);
    }

    @OnClick(R.id.start_process)
    public void run() {
        mPresenter.start();
        PackageManagerUtils.getApplicationsPermissionsList(getApplicationContext()).subscribeOn(Schedulers.newThread())
                .observeOn(AndroidSchedulers.mainThread()).subscribe(new Subscriber<List<ApplicationInfoModel>>() {
            @Override
            public void onCompleted() {

            }

            @Override
            public void onError(Throwable e) {

            }

            @Override
            public void onNext(List<ApplicationInfoModel> applicationInfoModels) {
                mPresenter.loadApplicationCategories(applicationInfoModels);
            }
        });
    }

}
