package com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest;

import android.util.Log;

import com.example.ext_mateuszbratkows.androidmalwaredetec.common.Constants;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModelTest;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest.entities.application_info_response.ApplicationInfoResponse;
import com.google.gson.JsonObject;

import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import rx.Observable;
import rx.Subscriber;

/**
 * Created by ext_mateusz.bratkows on 2016-05-19.
 */
public class ApplicationInfoRemoteDataSource implements ApplicationInfoRemoteDataSourceInteface {

    public DataAppAPI dataAppAPI;

    public ApplicationInfoRemoteDataSource(DataAppAPI dataAppAPI) {
        this.dataAppAPI = dataAppAPI;
    }


    @Override
    public Observable<List<ApplicationInfoModelTest>> loadApplicationList() {
        return null;
    }

    @Override
    public void saveApplicationList(List<ApplicationInfoModelTest> mApplicationList) {

    }

    @Override
    public void updateApplicationList(List<ApplicationInfoModelTest> mApplicationList) {

    }

    @Override
    public Observable<ApplicationInfoResponse> loadApplicationCategories(final JsonObject mJsonObject) {
        return Observable.create(new Observable.OnSubscribe<ApplicationInfoResponse>() {
            @Override
            public void call(final Subscriber<? super ApplicationInfoResponse> subscriber) {
                if (subscriber.isUnsubscribed()) {
                    return;
                } else {
                    dataAppAPI.getInformationAboutApplications(Constants.API_KEY, mJsonObject).enqueue(new Callback<ApplicationInfoResponse>() {
                        @Override
                        public void onResponse(Call<ApplicationInfoResponse> call, Response<ApplicationInfoResponse> response) {
                            ApplicationInfoResponse mApplicationInfoResponse = response.body();
                            subscriber.onNext(mApplicationInfoResponse);
                            subscriber.onCompleted();
                            Log.i("TAG", String.valueOf(response.code()));
                        }

                        @Override
                        public void onFailure(Call<ApplicationInfoResponse> call, Throwable t) {
                            subscriber.onError(t);
                            Log.e("TAG", t.toString());
                        }
                    });
                }
            }
        });
    }
}
