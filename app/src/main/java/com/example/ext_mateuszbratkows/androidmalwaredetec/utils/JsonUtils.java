package com.example.ext_mateuszbratkows.androidmalwaredetec.utils;

import android.content.Context;

import com.example.ext_mateuszbratkows.androidmalwaredetec.common.Constants;
import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModelTest;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import rx.Observable;
import rx.Subscriber;
import weka.core.Instance;
import weka.core.Instances;


/**
 * Created by ext_mateusz.bratkows on 2016-05-22.
 */
public class JsonUtils {

    private JsonUtils() {

    }

    public static JsonObject parseApplicationInfoToJSON(List<ApplicationInfoModelTest> mApplicationList) {
        JsonArray mJsonArray = new JsonArray();
        JsonObject mJsonObject = new JsonObject();
        for (ApplicationInfoModelTest applicationInfoModel : mApplicationList) {
            mJsonArray.add(applicationInfoModel.getPackageName());
        }
        mJsonObject.add("packages", mJsonArray);
        return mJsonObject;
    }




    public static Observable<String> loadJSONFromAssets(final Context mContext) {
        return Observable.create(new Observable.OnSubscribe<String>() {
            @Override
            public void call(Subscriber<? super String> subscriber) {
                String jsonFile = null;
                if (subscriber.isUnsubscribed()) {
                    return;
                }
                try {
                    InputStream inputStream = mContext.getAssets().open(Constants.JSON_FILE);
                    int size = inputStream.available();
                    byte[] buffer = new byte[size];
                    inputStream.read(buffer);
                    inputStream.close();
                    jsonFile = new String(buffer, "UTF-8");
                } catch (IOException e) {
                    e.printStackTrace();
                    subscriber.onError(e);
                }
                if (!subscriber.isUnsubscribed()) {
                    subscriber.onNext(jsonFile);
                    subscriber.onCompleted();
                }
            }
        });
    }
}
