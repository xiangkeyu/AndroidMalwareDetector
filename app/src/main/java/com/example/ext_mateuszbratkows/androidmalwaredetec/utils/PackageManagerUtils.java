package com.example.ext_mateuszbratkows.androidmalwaredetec.utils;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;

import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModel;

import java.util.ArrayList;
import java.util.List;

import rx.Observable;
import rx.Subscriber;

/**
 * Created by ext_mateusz.bratkows on 2016-05-19.
 */
public class PackageManagerUtils {

    public static Observable<List<ApplicationInfoModel>> getApplicationsPermissionsList(final Context mContext) {
        return Observable.create(new Observable.OnSubscribe<List<ApplicationInfoModel>>() {
            @Override
            public void call(Subscriber<? super List<ApplicationInfoModel>> subscriber) {
                if (subscriber.isUnsubscribed()) {
                    return;
                }
                if (mContext != null) {
                    final PackageManager pm = mContext.getPackageManager();
                    final List<ApplicationInfo> installedApps = pm.getInstalledApplications(PackageManager.GET_META_DATA);
                    final ArrayList<ApplicationInfoModel> mApplication = new ArrayList<>();
                    for (android.content.pm.ApplicationInfo app : installedApps) {
                        try {
                            PackageInfo packageInfo = pm.getPackageInfo(app.packageName, PackageManager.GET_PERMISSIONS);
                            mApplication.add(new ApplicationInfoModel(packageInfo.applicationInfo.loadLabel(mContext.getPackageManager()).toString(), packageInfo.packageName, packageInfo.requestedPermissions));

                        } catch (PackageManager.NameNotFoundException e) {
                            subscriber.onError(e);
                            e.printStackTrace();
                        }
                    }
                    if (!subscriber.isUnsubscribed()) {
                        subscriber.onNext(mApplication);
                        subscriber.onCompleted();
                    }
                }
            }
        });
    }
}

