package com.example.ext_mateuszbratkows.androidmalwaredetec.utils;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;

import com.example.ext_mateuszbratkows.androidmalwaredetec.data.local.models.ApplicationInfoModelTest;

import java.util.ArrayList;
import java.util.List;

import rx.Observable;
import rx.Subscriber;

/**
 * Created by ext_mateusz.bratkows on 2016-05-19.
 */
public class PackageManagerUtils {

    public static Observable<List<ApplicationInfoModelTest>> getApplicationsPermissionsList(final Context mContext) {
        return Observable.create(new Observable.OnSubscribe<List<ApplicationInfoModelTest>>() {
            @Override
            public void call(Subscriber<? super List<ApplicationInfoModelTest>> subscriber) {
                if (subscriber.isUnsubscribed()) {
                    return;
                }
                if (mContext != null) {
                    final PackageManager mPackageManager = mContext.getPackageManager();
                    final List<ApplicationInfo> installedApps = mPackageManager.getInstalledApplications(PackageManager.GET_META_DATA);
                    final List<ApplicationInfoModelTest> mApplication = new ArrayList<>();
                    for (int j = 0; j < installedApps.size(); j++) {
                        try {
                            PackageInfo packageInfo = mPackageManager.getPackageInfo(installedApps.get(j).packageName, PackageManager.GET_PERMISSIONS);
                            ApplicationInfoModelTest mAppInfo = new ApplicationInfoModelTest(packageInfo.applicationInfo.loadLabel(mContext.getPackageManager()).toString(),
                                    packageInfo.packageName);
                            String[] permissionArray = packageInfo.requestedPermissions;
                            if (permissionArray != null) {
                                for (int i = 0; i < permissionArray.length - 1; i++) {
                                    mAppInfo.setKeyValue(permissionArray[i], 1);
                                }
                            }
                            mApplication.add(mAppInfo);
                        } catch (PackageManager.NameNotFoundException e) {
                            subscriber.onError(e);
                        }

                    }
                    if (!subscriber.isUnsubscribed()) {
                        subscriber.onNext(mApplication);
                        subscriber.onCompleted();
                    }
                }
            }
        });
    }
}
  /*  for (int i = 0; i < applicationInfoModels.size(); i++) {
        applicationInfoModelTestList.add(new ApplicationInfoModelTest(applicationInfoModels.get(i).getApplicationName(),
                applicationInfoModels.get(i).getCategoryApplication(), applicationInfoModels.get(i).getPackageName()));
        if (applicationInfoModels.get(i).getPermissionsName() != null) {
            String[] mApplicationStringArray = applicationInfoModels.get(i).getPermissionsName();
            for (int k = 0; k < mApplicationStringArray.length - 1; k++)
                for (int j = 0; j < mPermissionsList.size(); j++) {
                    if (mPermissionsList.get(j).equals(mApplicationStringArray[k])) {
                        applicationInfoModelTestList.get(i).setKeyValue(mPermissionsList.get(j), 1);
                        break;
                    }
                }
        }
        Log.d(Constants.LOG_TAG, "OK");
}*/

