package com.example.ext_mateuszbratkows.androidmalwaredetec.di.modules;

import com.example.ext_mateuszbratkows.androidmalwaredetec.data.remote.rest.DataAppAPI;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.util.concurrent.TimeUnit;

import javax.inject.Singleton;

import dagger.Module;
import dagger.Provides;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;

/**
 * Created by ext_mateusz.bratkows on 2016-05-18.
 */
@Module
public class NetModule {
    private String apiURL;

    public NetModule(String apiURL) {
        this.apiURL = apiURL;
    }

    @Provides
    @Singleton
    Gson provideGson() {
        GsonBuilder mBuilder = new GsonBuilder();
        mBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);
        return mBuilder.create();
    }

    @Provides
    @Singleton
    OkHttpClient provideOkHttpClient() {
        OkHttpClient.Builder mBuilder = new OkHttpClient.Builder();
        mBuilder.connectTimeout(60, TimeUnit.SECONDS);
        mBuilder.readTimeout(60, TimeUnit.SECONDS);
        mBuilder.writeTimeout(60, TimeUnit.SECONDS);
        return mBuilder.build();
    }

    @Provides
    @Singleton
    Retrofit provideRetrofit(Gson gson, OkHttpClient okHttpClient) {
        Retrofit.Builder mBuilder = new Retrofit.Builder();
        mBuilder.client(okHttpClient);
        mBuilder.addConverterFactory(GsonConverterFactory.create(gson));
        mBuilder.baseUrl(apiURL);
        mBuilder.addCallAdapterFactory(RxJavaCallAdapterFactory.create());
        return mBuilder.build();
    }

    @Provides
    @Singleton
    DataAppAPI provideDataApp(Retrofit retrofit) {
        return retrofit.create(DataAppAPI.class);
    }

}
